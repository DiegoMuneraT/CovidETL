USE DATABASE ETL_COVID_USERS;

// Create schema for snowpipe
CREATE OR REPLACE SCHEMA TRANSFORMED_DATA_SCHEMA;

// Create the table where we are going to store the data
--DROP TABLE IF EXISTS TRANSFORMED_DATA_SOURCE_TABLE;
CREATE OR REPLACE TABLE TRANSFORMED_DATA_SOURCE_TABLE(
    sourceDate STRING,
    growthRate FLOAT
);

// Create file format schema
--DROP SCHEMA IF EXISTS FILE_FORMAT_SCHEMA;
CREATE SCHEMA IF NOT EXISTS FILE_FORMAT_SCHEMA;
CREATE OR REPLACE file format FILE_FORMAT_SCHEMA.FORMAT_CSV
    type = 'CSV'
    field_delimiter = ','
    record_delimiter = '\n'
    skip_header = 1;

// Create staging
--DROP SCHEMA IF EXISTS EXTERNAL_STAGE_SCHEMA;
CREATE SCHEMA IF NOT EXISTS EXTERNAL_STAGE_SCHEMA;

--DROP STAGE IF EXISTS EXTERNAL_STAGE_SCHEMA.S3_TRANSFORMED_DATA_STAGE;
CREATE OR REPLACE STAGE EXTERNAL_STAGE_SCHEMA.S3_TRANSFORMED_DATA_STAGE
URL = 's3://transformedapiuserdata'
CREDENTIALS = (AWS_KEY_ID = 'AKIAW3MEARI4R5B5S7NL' AWS_SECRET_KEY = '+GBZxZmqmAlUmtvybZI9EWfjuVwn5u1Db635yDpg')
FILE_FORMAT = FILE_FORMAT_SCHEMA.format_csv;

LIST @EXTERNAL_STAGE_SCHEMA.S3_TRANSFORMED_DATA_STAGE;

// Create the snowpipe where we are going to take and copy the data
--DROP SCHEMA IF EXISTS SNOWPIPE_SCHEMA;
CREATE SCHEMA IF NOT EXISTS SNOWPIPE_SCHEMA;

--DROP PIPE IF EXISTS SNOWPIPE_SCHEMA.ETL_SNOWPIPE;
CREATE OR REPLACE PIPE SNOWPIPE_SCHEMA.ETL_SNOWPIPE
AUTO_INGEST = TRUE
AS
COPY INTO TRANSFORMED_DATA_SCHEMA.TRANSFORMED_DATA_SOURCE_TABLE
FROM @EXTERNAL_STAGE_SCHEMA.S3_TRANSFORMED_DATA_STAGE;

--ALTER PIPE ETL_SNOWPIPE REFRESH;

DESC PIPE SNOWPIPE_SCHEMA.ETL_SNOWPIPE;

SELECT * FROM TRANSFORMED_DATA_SCHEMA.TRANSFORMED_DATA_SOURCE_TABLE LIMIT 10;